package com.devil.guide.arithmetic;

import org.junit.Test;

/**
 * 位运算
 * @author devil
 * @since 2018/4/2
 */
public class BitOperation {

    @Test
    public void bitOpt() {
        /*
          与运算 &  规则 ：都为1时才为1
          7二进制 0111
          9二进制 1001
          -----------
                 0001   ==1
         */
        System.out.println(7 & 9);

        /*
          或运算 | 规则：有一个为1，则为1
          7二进制 0111
          9二进制 1001
          ----------
                 1111 == 15
         */
        System.out.println(7 | 9);

        /*
          异或运算  ^ 规则：不同为1
          7二进制 0111
          9二进制 1001
          ----------
                 1110 == 14
         */
        System.out.println(7 ^ 9);

        /*
          正数取反运算 ~ 规则：按位取反
          7二进制 0000 0000 0000 0000 0000 0000 0000 0111
                 1111 1111 1111 1111 1111 1111 1111 1000 取反之后变成负数
                 1000 0000 0000 0000 0000 0000 0000 0111 补码
                 1000 0000 0000 0000 0000 0000 0000 1000 原码  == -8
         */
        System.out.println(~7);

        /*
          负数取反
          7二进制 1000 0000 0000 0000 0000 0000 0000 0111
                 1111 1111 1111 1111 1111 1111 1111 1000  负数先转成补码
                 1111 1111 1111 1111 1111 1111 1111 1001  补码
                 0000 0000 0000 0000 0000 0000 0000 0110 得到负数的补码之后进行取反 (这时得到的是正数) 6
         */
        System.out.println(~-7);

        /*
          左移
          1 0001 移位后 10000 = 2^4 = 16
          3 0011 移位后 110000 = 2^5 + 2^4 = 32 + 16 = 48
          可以得出结论 n << m 结果为 n x 2^m
         */
        System.out.println(3 << 4);

        /*
          带符号右移
          11 >> 2
          11 0000 0000 0000 0000 0000 0000 0000 1011
          把低位的最后两个数字移出，因为该数字是正数，所以在高位补零
          2  0000 0000 0000 0000 0000 0000 0000 0010
          可以得出结论 n >> m 结果为 n / 2^m
         */
        System.out.println(11 >> 2);

        /*
          无符号右移
          规则和右移运算是一样的，只是填充时不管左边的数字是正是负都用0来填充
          对于正数而言，>>和>>>没区别
          -12 的二进制为：1111 1111 1111 1111 1111 1111 1111 0100
          -12 >> 3 即带符号右移3位，结果是：1111 1111 1111 1111 1111 1111 1111 1110，十进制为： -2；
          -12 >>> 3 就是右移三位，前面补零，为：0001 1111 1111 1111 1111 1111 1111 1110，十进制为：536870910
         */
        System.out.println(-2 >>> 1);
    }

    @Test
    public void swap() {
        /*
          a = 1 = 0001 b = 2 = 0010
         */
        int a = 1, b = 2;
        /*
          a = 0001 ^ 0010 = 0011 = 3
          b = 0011 ^ 0010 = 0001 = 1
          a = 0011 ^ 0001 = 0010 = 2
         */
        a = a ^ b;
        b = a ^ b;
        a = a ^ b;
        System.out.println(a + ", " + b);
    }

}
